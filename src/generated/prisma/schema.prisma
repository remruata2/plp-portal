generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int                 @id @default(autoincrement())
  username        String              @unique @db.VarChar(100)
  password_hash   String              @db.VarChar(255)
  role            UserRole            @default(staff)
  is_active       Boolean?            @default(true)
  last_login      DateTime?           @db.Timestamptz(6)
  created_at      DateTime?           @default(now()) @db.Timestamptz(6)
  upload_sessions DataUploadSession[]
  approved_data   MonthlyHealthData[] @relation("DataApprover")
  uploaded_data   MonthlyHealthData[] @relation("DataUploader")

  @@map("user")
}

model District {
  id           Int                 @id @default(autoincrement())
  name         String              @unique @db.VarChar(100)
  created_at   DateTime            @default(now()) @db.Timestamptz(6)
  updated_at   DateTime            @updatedAt @db.Timestamptz(6)
  facilities   Facility[]
  monthly_data MonthlyHealthData[]

  @@map("district")
}

model FacilityType {
  id         Int        @id @default(autoincrement())
  name       String     @unique @db.VarChar(100)
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  updated_at DateTime   @updatedAt @db.Timestamptz(6)
  facilities Facility[]

  @@map("facility_type")
}

model Facility {
  id               Int                 @id @default(autoincrement())
  name             String              @db.VarChar(200)
  district_id      Int
  facility_type_id Int
  created_at       DateTime            @default(now()) @db.Timestamptz(6)
  updated_at       DateTime            @updatedAt @db.Timestamptz(6)
  facility_code    String?             @unique @db.VarChar(50)
  nin              String?             @unique @db.VarChar(50)
  district         District            @relation(fields: [district_id], references: [id], onDelete: Cascade)
  facility_type    FacilityType        @relation(fields: [facility_type_id], references: [id])
  monthly_data     MonthlyHealthData[]
  sub_centre       sub_centre[]

  @@index([district_id])
  @@index([facility_type_id])
  @@map("facility")
}

model MonthlyHealthData {
  id            Int         @id @default(autoincrement())
  facility_id   Int?
  sub_centre_id Int?
  district_id   Int
  indicator_id  Int?
  report_month  String      @db.VarChar(7)
  value         Decimal?    @db.Decimal(15, 2)
  data_quality  DataQuality @default(PENDING)
  remarks       String?
  uploaded_by   Int
  approved_by   Int?
  approved_at   DateTime?   @db.Timestamptz(6)
  created_at    DateTime    @default(now()) @db.Timestamptz(6)
  updated_at    DateTime    @updatedAt @db.Timestamptz(6)
  achievement   Decimal?    @db.Decimal(5, 2)
  denominator   Decimal?    @db.Decimal(15, 2)
  numerator     Decimal?    @db.Decimal(15, 2)
  target_value  Decimal?    @db.Decimal(10, 2)
  approver      User?       @relation("DataApprover", fields: [approved_by], references: [id])
  district      District    @relation(fields: [district_id], references: [id])
  facility      Facility?   @relation(fields: [facility_id], references: [id])
  sub_centre    sub_centre? @relation(fields: [sub_centre_id], references: [id])
  indicator     Indicator?  @relation(fields: [indicator_id], references: [id])
  uploader      User        @relation("DataUploader", fields: [uploaded_by], references: [id])

  @@unique([facility_id, sub_centre_id, indicator_id, report_month])
  @@index([report_month])
  @@index([district_id])
  @@index([indicator_id])
  @@map("monthly_health_data")
}

model DataUploadSession {
  id             Int          @id @default(autoincrement())
  file_name      String       @db.VarChar(200)
  file_path      String?      @db.VarChar(500)
  report_month   String       @db.VarChar(7)
  total_records  Int
  success_count  Int          @default(0)
  error_count    Int          @default(0)
  status         UploadStatus @default(PROCESSING)
  upload_summary Json?
  uploaded_by    Int
  created_at     DateTime     @default(now()) @db.Timestamptz(6)
  completed_at   DateTime?    @db.Timestamptz(6)
  uploader       User         @relation(fields: [uploaded_by], references: [id])

  @@map("data_upload_session")
}

model Formula {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(200)
  description String?
  structure   Json
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @updatedAt @db.Timestamptz(6)

  @@map("formula")
}

model Indicator {
  id           Int                 @id @default(autoincrement())
  code         String              @unique @db.VarChar(50)
  name         String              @db.VarChar(200)
  description  String?
  type         String              @db.VarChar(20)
  structure    Json?
  created_at   DateTime            @default(now()) @db.Timestamptz(6)
  updated_at   DateTime            @updatedAt @db.Timestamptz(6)
  monthly_data MonthlyHealthData[]

  @@map("indicator")
}

model field {
  id          Int      @id @default(autoincrement())
  code        String   @unique @db.VarChar(50)
  name        String   @db.VarChar(200)
  description String?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @db.Timestamptz(6)
}

model sub_centre {
  id                  Int                 @id @default(autoincrement())
  name                String              @db.VarChar(200)
  facility_id         Int
  created_at          DateTime            @default(now()) @db.Timestamptz(6)
  updated_at          DateTime            @db.Timestamptz(6)
  facility_code       String?             @unique @db.VarChar(50)
  nin                 String?             @unique @db.VarChar(50)
  monthly_health_data MonthlyHealthData[]
  facility            Facility            @relation(fields: [facility_id], references: [id], onDelete: Cascade)

  @@index([facility_id])
}

enum UserRole {
  admin
  staff

  @@map("user_role")
}

enum CalculationType {
  DIRECT_INPUT
  CALCULATED
  AGGREGATED
  PERCENTAGE

  @@map("calculation_type")
}

enum DataQuality {
  PENDING
  VALIDATED
  APPROVED
  REJECTED

  @@map("data_quality")
}

enum UploadStatus {
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED

  @@map("upload_status")
}
