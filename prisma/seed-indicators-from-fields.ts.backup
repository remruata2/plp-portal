import { PrismaClient, TargetType, FormulaType } from "../src/generated/prisma";

const prisma = new PrismaClient();

// Helper function to parse target values and determine target types
function parseTargetInfo(targetValue: string, targetIndicatorType: string): { targetType: TargetType; parsedTargetValue: string } {
  // Default values
  let targetType: TargetType = "PERCENTAGE";
  let parsedTargetValue = targetValue;

  // Handle different target indicator types
  switch (targetIndicatorType) {
    case "Percentage Range":
      targetType = "RANGE";
      // Parse percentage range (e.g., "3%-5%", "50-100%")
      if (targetValue.includes("-")) {
        const [min, max] = targetValue.split("-").map(v => v.replace("%", "").trim());
        parsedTargetValue = JSON.stringify({ min: Number(min), max: Number(max) });
      }
      break;

    case "Range Based":
      targetType = "RANGE";
      // Parse numeric range (e.g., "5-10 sessions", "25-50 calls")
      if (targetValue.includes("-")) {
        const rangeMatch = targetValue.match(/(\d+)\s*-\s*(\d+)/);
        if (rangeMatch) {
          parsedTargetValue = JSON.stringify({ 
            min: Number(rangeMatch[1]), 
            max: Number(rangeMatch[2]) 
          });
        }
      }
      break;

    case "Binary":
      targetType = "BINARY";
      // For binary targets like "100%", "Yes", etc.
      if (targetValue === "100%" || targetValue === "100") {
        parsedTargetValue = "true";
      } else if (targetValue === "Yes" || targetValue === "yes") {
        parsedTargetValue = "true";
      } else {
        parsedTargetValue = targetValue;
      }
      break;

    default:
      // Handle other cases or use defaults
      if (targetValue.includes("%")) {
        // If it's a percentage but not specified as range
        targetType = "PERCENTAGE";
        parsedTargetValue = targetValue.replace("%", "").trim();
      } else if (targetValue.includes("-")) {
        // If it contains a range but type not specified
        targetType = "RANGE";
        const rangeMatch = targetValue.match(/(\d+)\s*-\s*(\d+)/);
        if (rangeMatch) {
          parsedTargetValue = JSON.stringify({ 
            min: Number(rangeMatch[1]), 
            max: Number(rangeMatch[2]) 
          });
        }
      }
      break;
  }

  return { targetType, parsedTargetValue };
}

/**
 * Get the correct calculation formula based on indicator code
 * Based on the target/frequency requirements from the table
 */
function getCalculationFormula(indicatorCode: string): string {
  switch (indicatorCode) {
    // Population-based indicators that need monthly targets (B/12)
    case "CB001": // CBAC filled for the month
    case "HS001": // HTN screened for the month
    case "DS001": // DM screened for the month
      return "(A/(B/12))*100";

    // Population-based indicators that need 5-year targets (B/60)
    case "OC001": // Oral Ca. Screened for the month
    case "BC001": // Breast & Cervical Ca. screened for the month
      return "(A/(B/60))*100";

    // Binary indicators (direct value)
    case "ES001": // Elderly Support Group formed
    case "EA001": // Elderly Support Group activity
    case "RI001": // RI sessions held
    case "EC001": // Elderly clinic conducted
    case "JM001": // JAS meeting conducted
    case "ND001": // NCD Diagnosed & Tx completed
      return "A";

    // Patient satisfaction (direct score)
    case "PS001": // Patient satisfaction score
      return "A";

    // Range-based indicators
    case "TC001": // Teleconsultation
    case "DV001": // DVDMS issues
      return "A";

    // All other indicators use standard percentage calculation
    default:
      return "(A/B)*100";
  }
}

// Worker allocation configuration by worker type
interface WorkerAllocation {
  hwo?: number;
  mo?: number;
  ayush_mo?: number;
  hw?: number;
  asha?: number;
  colocated_sc_hw?: number;
}

async function seedIndicatorsFromFields() {
  console.log("🌱 Starting indicator seeding from fields...");

  // Get all fields for reference
  const fields = await prisma.field.findMany();
  const fieldMap = new Map(fields.map((f) => [f.code, f]));

  // Create indicators based on the markdown files
  console.log("📊 Creating indicators...");
  let createdCount = 0;
  let skippedCount = 0;
  let updatedCount = 0;
  const indicators = [
    // PHC Total Footfall Indicator
    {
      code: "TF001_PHC",
      name: "Total Footfall (M&F) - PHC",
      description: "Total footfall as percentage of population for PHC",
      numerator_field_code: "total_footfall_phc_colocated_sc",
      denominator_field_code: "total_population",
      numerator_label: "Total Footfall (M&F) PHC+colocated SC",
      denominator_label: "Total Population",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 3, max: 5 }),
      target_formula: "3%-5%",
      conditions: "Monthly monitoring",
      applicable_facility_types: ["PHC"],
      source_of_verification: "AAM Portal",
      worker_allocation: {
        hwo: 500,
        mo: 1000,
        ayush_mo: 1000,
        hw: 0,
        asha: 0
      },
    },
    // SC-HWC Total Footfall Indicator
    {
      code: "TF001_SC",
      name: "Total Footfall (M&F) - SC-HWC",
      description: "Total footfall as percentage of population for SC-HWC",
      numerator_field_code: "total_footfall_sc_clinic",
      denominator_field_code: "total_population",
      numerator_label: "Total footfall (SC+Clinic)",
      denominator_label: "Total Population",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 3, max: 5 }),
      target_formula: "3%-5%",
      conditions: "Monthly monitoring",
      applicable_facility_types: ["SC_HWC"],
      source_of_verification: "AAM Portal",
      worker_allocation: {
        hwo: 1000,
        mo: 0,
        ayush_mo: 0,
        hw: 0,
        asha: 0
      },
    },
    // U-HWC Total Footfall Indicator
    {
      code: "TF001_UHWC",
      name: "Total Footfall (M&F) - U-HWC",
      description: "Total footfall as percentage of population for U-HWC",
      numerator_field_code: "total_footfall_uhwc",
      denominator_field_code: "total_population",
      numerator_label: "Total Footfall (M&F)",
      denominator_label: "Total Population",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 3, max: 5 }),
      target_formula: "3%-5%",
      conditions: "Monthly monitoring",
      applicable_facility_types: ["U_HWC"],
      source_of_verification: "AAM Portal",
      worker_allocation: {
        hwo: 2000,
        mo: 0,
        ayush_mo: 0,
        hw: 0,
        asha: 0
      },
    },
    // A-HWC Total Footfall Indicator
    {
      code: "TF001_AHWC",
      name: "Total Footfall (M&F) - A-HWC",
      description: "Total footfall as percentage of population for A-HWC",
      numerator_field_code: "total_footfall_sc_clinic",
      denominator_field_code: "total_population",
      numerator_label: "Total footfall (SC+Clinic)",
      denominator_label: "Total Population",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 3, max: 5 }),
      target_formula: "3%-5%",
      conditions: "Monthly monitoring",
      applicable_facility_types: ["A_HWC"],
      source_of_verification: "AAM Portal",
      worker_allocation: {
        hwo: 0,
        mo: 0,
        ayush_mo: 1000,
        hw: 0,
        asha: 0
      },
    },
    // UPHC Total Footfall Indicator
    {
      code: "TF001_UPHC",
      name: "Total Footfall (M&F) - UPHC",
      description: "Total footfall as percentage of population for UPHC",
      numerator_field_code: "total_footfall_phc_colocated_sc",
      denominator_field_code: "total_population",
      numerator_label: "Total Footfall (M&F) PHC+colocated SC",
      denominator_label: "Total Population",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 3, max: 5 }),
      target_formula: "3%-5%",
      conditions: "Monthly monitoring",
      applicable_facility_types: ["UPHC"],
      source_of_verification: "AAM Portal",
      worker_allocation: {
        hwo: 500,
        mo: 0,
        ayush_mo: 0,
        hw: 0,
        asha: 0
      },
    },
    // Wellness Sessions Indicator
    {
      code: "WS001",
      name: "Total Wellness sessions",
      description: "Total Wellness session conducted during the month",
      numerator_field_code: "wellness_sessions_conducted",
      denominator_field_code: "target_wellness_sessions",
      numerator_label: "Total Wellness session conducted during the month",
      denominator_label: "Target Wellness Sessions",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 5, max: 10 }),
      target_formula: "5-10 sessions",
      conditions: "Monthly target achievement",
      applicable_facility_types: ["PHC", "UPHC", "SC_HWC", "U_HWC", "A_HWC"],
      source_of_verification: "AAM Portal",
      worker_allocation: {
        hwo: 500,
        mo: 500,
        ayush_mo: 500,
        hw: 0,
        asha: 0
      },
    },
    {
      code: "PP001",
      name: "No of Prakriti Parikshan conducted",
      description: "Number of Prakriti Parikshan conducted",
      numerator_field_code: "prakriti_parikshan_conducted",
      denominator_field_code: "population_18_plus",
      numerator_label: "Prakriti Parikshan Conducted",
      denominator_label: "Population 18+ / 12",
      target_type: "PERCENTAGE" as const,
      target_value: "80",
      target_formula: "80% above only(50-80%)",
      conditions: "Population-based target",
      applicable_facility_types: ["A_HWC"],
      source_of_verification: "State report",
      worker_allocation: {
        ayush_mo: 1000,
      },
    },
    {
      code: "TC001",
      name: "Teleconsultation",
      description: "Teleconsultation against target by facility type",
      numerator_field_code: "teleconsultation_conducted",
      denominator_field_code: "target_teleconsultation",
      numerator_label: "Teleconsultation Conducted",
      denominator_label: "Target Teleconsultation",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 25, max: 50 }),
      target_formula: "25-50 calls",
      conditions: "Monthly target achievement",
      applicable_facility_types: ["PHC", "UPHC", "U_HWC", "SC_HWC", "A_HWC"],
      source_of_verification: "e-Sanjeevani",
      worker_allocation: {
        hwo: 2000,
        mo: 2500,
        ayush_mo: 2000,
      },
    },
    {
      code: "AF001",
      name: "Total ANC footfall",
      description: "ANC visits against due list",
      numerator_field_code: "anc_footfall",
      denominator_field_code: "anc_due_list",
      numerator_label: "ANC Footfall",
      denominator_label: "ANC Due List",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 50, max: 100 }),
      target_formula: "50-100%",
      conditions: "If ANC due is 0 then the indicator may be NA",
      applicable_facility_types: ["PHC", "SC_HWC", "A_HWC"],
      source_of_verification: "HMIS",
    },
    {
      code: "HT001",
      name: "Pregnant women tested for Hb",
      description: "ANC tested for Hb against footfall",
      numerator_field_code: "anc_tested_hb",
      denominator_field_code: "anc_footfall",
      numerator_label: "ANC Tested for Hb",
      denominator_label: "Total ANC Footfall",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 50, max: 100 }),
      target_formula: "50-100%",
      conditions: "Same as Sl.5 denominator",
      applicable_facility_types: ["PHC", "SC_HWC", "A_HWC"],
      source_of_verification: "HMIS",
    },
    // TB Screening Indicators - Facility specific
    {
      code: "TS001_PHC",
      name: "Individuals screened for TB - PHC",
      description: "TB screening against total footfall for PHC",
      numerator_field_code: "tb_screenings",
      denominator_field_code: "total_footfall_phc_colocated_sc",
      numerator_label: "TB Screenings",
      denominator_label: "Total Footfall (M&F) PHC+colocated SC",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 50, max: 100 }),
      target_formula: "50-100%",
      conditions: "Same as Sl.1 Numerator",
      applicable_facility_types: ["PHC"],
      source_of_verification: "TB Cough App",
    },
    {
      code: "TS001_SC",
      name: "Individuals screened for TB - SC-HWC",
      description: "TB screening against total footfall for SC-HWC",
      numerator_field_code: "tb_screenings",
      denominator_field_code: "total_footfall_sc_clinic",
      numerator_label: "TB Screenings",
      denominator_label: "Total footfall (SC+Clinic)",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 50, max: 100 }),
      target_formula: "50-100%",
      conditions: "Same as Sl.1 Numerator",
      applicable_facility_types: ["SC_HWC"],
      source_of_verification: "TB Cough App",
    },
    {
      code: "TS001_UHWC",
      name: "Individuals screened for TB - U-HWC",
      description: "TB screening against total footfall for U-HWC",
      numerator_field_code: "tb_screenings",
      denominator_field_code: "total_footfall_uhwc",
      numerator_label: "TB Screenings",
      denominator_label: "Total Footfall (M&F)",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 50, max: 100 }),
      target_formula: "50-100%",
      conditions: "Same as Sl.1 Numerator",
      applicable_facility_types: ["U_HWC"],
      source_of_verification: "TB Cough App",
    },
    {
      code: "TS001_AHWC",
      name: "Individuals screened for TB - A-HWC",
      description: "TB screening against total footfall for A-HWC",
      numerator_field_code: "tb_screenings",
      denominator_field_code: "total_footfall_sc_clinic",
      numerator_label: "TB Screenings",
      denominator_label: "Total footfall (SC+Clinic)",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 50, max: 100 }),
      target_formula: "50-100%",
      conditions: "Same as Sl.1 Numerator",
      applicable_facility_types: ["A_HWC"],
      source_of_verification: "TB Cough App",
    },
    {
      code: "TS001_UPHC",
      name: "Individuals screened for TB - UPHC",
      description: "TB screening against total footfall for UPHC",
      numerator_field_code: "tb_screenings",
      denominator_field_code: "total_footfall_phc_colocated_sc",
      numerator_label: "TB Screenings",
      denominator_label: "Total Footfall (M&F) PHC+colocated SC",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 50, max: 100 }),
      target_formula: "50-100%",
      conditions: "Same as Sl.1 Numerator",
      applicable_facility_types: ["UPHC"],
      source_of_verification: "TB Cough App",
    },
    {
      code: "CT001",
      name: "Household visited for TB contact tracing",
      description: "TB contact tracing against pulmonary TB patients",
      numerator_field_code: "tb_contact_tracing_households",
      denominator_field_code: "pulmonary_tb_patients",
      numerator_label: "TB Contact Tracing Households",
      denominator_label: "Pulmonary TB Patients",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 50, max: 100 }),
      target_formula: "50-100%",
      conditions:
        "If there are no Pulmonary TB patients, then the indicator may be NA",
      applicable_facility_types: ["PHC", "U_HWC", "SC_HWC", "A_HWC"],
      source_of_verification: "Nikshay",
    },
    {
      code: "DC001",
      name: "No. of TB patients visited for Differentiated TB Care",
      description: "TB differentiated care visits against total TB patients",
      numerator_field_code: "tb_differentiated_care_visits",
      denominator_field_code: "total_tb_patients",
      numerator_label: "TB Differentiated Care Visits",
      denominator_label: "Total TB Patients",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 50, max: 100 }),
      target_formula: "50-100%",
      conditions: "If there are no TB patients, then the indicator may be NA",
      applicable_facility_types: ["PHC", "U_HWC", "SC_HWC", "A_HWC"],
      source_of_verification: "Nikshay",
    },
    {
      code: "RS001",
      name: "RI sessions held",
      description: "RI sessions held against planned",
      numerator_field_code: "ri_sessions_held",
      denominator_field_code: "ri_sessions_planned",
      numerator_label: "RI Sessions Held",
      denominator_label: "RI Sessions Planned",
      target_type: "BINARY" as const,
      target_value: "true",
      target_formula: "100%",
      conditions: "Monthly target achievement",
      applicable_facility_types: ["PHC", "SC_HWC", "A_HWC"],
      source_of_verification: "U-Win",
    },
    {
      code: "RF001",
      name: "RI footfall",
      description: "RI footfall against due list",
      numerator_field_code: "ri_footfall",
      denominator_field_code: "ri_beneficiaries_due",
      numerator_label: "RI Footfall",
      denominator_label: "RI Beneficiaries Due",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 50, max: 100 }),
      target_formula: "50-100%",
      conditions: "Monthly target achievement",
      applicable_facility_types: ["PHC", "SC_HWC", "A_HWC"],
      source_of_verification: "U-Win",
    },
    {
      code: "CB001",
      name: "CBAC filled for the month",
      description: "CBAC filled against population target",
      numerator_field_code: "cbac_forms_filled",
      denominator_field_code: "population_30_plus",
      numerator_label: "CBAC Forms Filled",
      denominator_label: "Population 30+ / 12",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 50, max: 100 }),
      target_formula: "50-100%",
      conditions: "Population-based target",
      applicable_facility_types: ["PHC", "SC_HWC", "A_HWC"],
      source_of_verification: "NCD Portal",
    },
    {
      code: "HS001",
      name: "HTN screened for the month",
      description: "HTN screening against population target",
      numerator_field_code: "htn_screened",
      denominator_field_code: "population_30_plus",
      numerator_label: "HTN Screened",
      denominator_label: "Population 30+ / 12",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 50, max: 100 }),
      target_formula: "50-100%",
      conditions: "Population-based target",
      applicable_facility_types: ["PHC", "SC_HWC", "A_HWC"],
      source_of_verification: "NCD Portal",
    },
    {
      code: "DS001",
      name: "DM screened for the month",
      description: "DM screening against population target",
      numerator_field_code: "dm_screened",
      denominator_field_code: "population_30_plus",
      numerator_label: "DM Screened",
      denominator_label: "Population 30+ / 12",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 50, max: 100 }),
      target_formula: "50-100%",
      conditions: "Population-based target",
      applicable_facility_types: ["PHC", "SC_HWC", "A_HWC"],
      source_of_verification: "NCD Portal",
    },
    {
      code: "OC001",
      name: "Oral Ca. Screened for the month",
      description: "Oral cancer screening against population target",
      numerator_field_code: "oral_cancer_screened",
      denominator_field_code: "population_30_plus",
      numerator_label: "Oral Cancer Screened",
      denominator_label: "Population 30+ / 60",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 50, max: 100 }),
      target_formula: "50-100%",
      conditions: "Population-based target",
      applicable_facility_types: ["PHC", "SC_HWC", "A_HWC"],
      source_of_verification: "NCD Portal",
    },
    {
      code: "BC001",
      name: "Breast & Cervical Ca. screened for the month",
      description:
        "Breast & cervical cancer screening against female population target",
      numerator_field_code: "breast_cervical_cancer_screened",
      denominator_field_code: "population_30_plus_female",
      numerator_label: "Breast & Cervical Cancer Screened",
      denominator_label: "Female Population 30+ / 60",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 50, max: 100 }),
      target_formula: "50-100%",
      conditions: "Population-based target",
      applicable_facility_types: ["PHC", "SC_HWC", "A_HWC"],
      source_of_verification: "NCD Portal",
    },
    {
      code: "ND001",
      name: "NCD Diagnosed & Tx completed",
      description: "NCD diagnosed and treatment completed against referrals",
      numerator_field_code: "ncd_diagnosed_tx_completed",
      denominator_field_code: "ncd_referred_from_sc",
      numerator_label: "NCD Diagnosed & Tx Completed",
      denominator_label: "NCD Referred from SC",
      target_type: "BINARY" as const,
      target_value: "true",
      target_formula: "100% only",
      conditions: "Monthly target achievement",
      applicable_facility_types: ["PHC", "UPHC"],
      source_of_verification: "NCD Portal",
    },
    {
      code: "PS001",
      name: "Patient satisfaction score for the month",
      description: "Patient satisfaction score against maximum",
      numerator_field_code: "patient_satisfaction_score",
      denominator_field_code: "patient_satisfaction_max",
      numerator_label: "Patient Satisfaction Score",
      denominator_label: "Max Score (5)",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 70, max: 100 }),
      target_formula: "70% -100%(3.5 out of 5)",
      conditions: "Monthly target achievement",
      applicable_facility_types: ["PHC", "UPHC", "SC_HWC", "A_HWC"],
      source_of_verification: "QA Mizoram KPI dashboard",
    },
    {
      code: "EP001",
      name: "No of Elderly & Palliative patients visited",
      description: "Elderly and palliative visits against bedridden patients",
      numerator_field_code: "elderly_palliative_visits",
      denominator_field_code: "bedridden_patients",
      numerator_label: "Elderly & Palliative Visits",
      denominator_label: "Bed-ridden Patients",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 80, max: 100 }),
      target_formula: "80%-100%",
      conditions: "Monthly target achievement",
      applicable_facility_types: ["PHC", "U_HWC", "SC_HWC", "A_HWC"],
      source_of_verification: "HMIS",
    },
    {
      code: "EC001",
      name: "No of Elderly clinic conducted",
      description: "Elderly clinic conducted against target",
      numerator_field_code: "elderly_clinic_conducted",
      denominator_field_code: "target_elderly_clinic",
      numerator_label: "Elderly Clinic Conducted",
      denominator_label: "Target Elderly Clinic",
      target_type: "BINARY" as const,
      target_value: "true",
      target_formula: "100%",
      conditions: "Monthly target achievement",
      applicable_facility_types: ["PHC", "UPHC", "U_HWC", "SC_HWC", "A_HWC"],
      source_of_verification: "HMIS",
    },
    {
      code: "ES001",
      name: "Whether Elderly Support Group (Sanjivini) is formed",
      description: "Elderly support group formation status",
      numerator_field_code: "elderly_support_group_formed",
      denominator_field_code: "elderly_support_group_formed", // Self-reference for binary
      numerator_label: "Elderly Support Group Formed",
      denominator_label: "Yes/No",
      target_type: "BINARY" as const,
      target_value: "true",
      target_formula: "Yes",
      conditions: "Binary target",
      applicable_facility_types: ["SC_HWC", "A_HWC"],
      source_of_verification: "Patient Support Group Register",
    },
    {
      code: "EA001",
      name: "If Yes, any activity conducted during the month and recorded in register",
      description: "Elderly support group activity status",
      numerator_field_code: "elderly_support_group_activity",
      denominator_field_code: "elderly_support_group_activity", // Self-reference for binary
      numerator_label: "Elderly Support Group Activity",
      denominator_label: "Yes/No",
      target_type: "BINARY" as const,
      target_value: "true",
      target_formula: "Yes",
      conditions: "Binary target",
      applicable_facility_types: ["SC_HWC", "A_HWC"],
      source_of_verification: "Patient Support Group Register",
    },
    {
      code: "JM001",
      name: "No of JAS meeting conducted",
      description: "JAS meetings conducted against target",
      numerator_field_code: "jas_meetings_conducted",
      denominator_field_code: "target_jas_meetings",
      numerator_label: "JAS Meetings Conducted",
      denominator_label: "Target JAS Meetings",
      target_type: "BINARY" as const,
      target_value: "true",
      target_formula: "100%",
      conditions: "Monthly target achievement",
      applicable_facility_types: ["PHC", "UPHC", "U_HWC", "SC_HWC", "A_HWC"],
      source_of_verification: "AAM portal",
    },
    {
      code: "DI001",
      name: "No. of issues generated in DVDMS",
      description: "DVDMS issues generated against target",
      numerator_field_code: "dvdms_issues_generated",
      denominator_field_code: "target_dvdms_issues",
      numerator_label: "DVDMS Issues Generated",
      denominator_label: "Target DVDMS Issues",
      target_type: "RANGE" as const,
      target_value: JSON.stringify({ min: 25, max: 50 }),
      target_formula: "25-50 issues",
      conditions: "Monthly target achievement",
      applicable_facility_types: ["PHC", "UPHC", "U_HWC", "SC_HWC", "A_HWC"],
      source_of_verification: "DVDMS portal",
    },
  ];

  // Create or update indicators with proper target handling
  async function createOrUpdateIndicator(indicatorData: any) {
    const {
      code,
      name,
      description,
      numerator_field_code,
      denominator_field_code,
      numerator_label,
      denominator_label,
      target_type: originalTargetType,
      target_value: originalTargetValue,
      target_formula,
      target_indicator_type,
      conditions,
      applicable_facility_types,
      source_of_verification,
      worker_allocation = {}
    } = indicatorData;

    // Use the hardcoded target_type and target_value directly
    const targetType = originalTargetType as TargetType;
    const targetValue = originalTargetValue;

    // Find the fields by code
    const numeratorField = numerator_field_code ? fieldMap.get(numerator_field_code) : null;
    const denominatorField = denominator_field_code ? fieldMap.get(denominator_field_code) : null;

    // Check if indicator already exists
    const existingIndicator = await prisma.indicator.findUnique({
      where: { code },
    });

    if (existingIndicator) {
      // Update existing indicator
      const updatedIndicator = await prisma.indicator.update({
        where: { id: existingIndicator.id },
        data: {
          name,
          description,
          type: "FIELD_BASED", // Default type for now
          numerator_field_id: numeratorField?.id,
          denominator_field_id: denominatorField?.id,
          numerator_label,
          denominator_label,
          target_type: targetType, // Use hardcoded target type
          target_value: targetValue, // Use hardcoded target value
          target_formula,
          conditions,
          source_of_verification,
          applicable_facility_types: applicable_facility_types || [],
        },
      });

      // Delete existing worker allocations for this indicator
      await prisma.indicatorWorkerAllocation.deleteMany({
        where: { indicator_id: existingIndicator.id },
      });

      // Create new worker allocations
      for (const [workerType, amount] of Object.entries(worker_allocation)) {
        if (Number(amount) > 0) {
          await prisma.indicatorWorkerAllocation.create({
            data: {
              indicator_id: existingIndicator.id,
              worker_type: workerType,
              allocated_amount: Number(amount),
            },
          });
        }
      }

      console.log(`✅ Updated indicator ${code} with latest definition.`);
      return { indicator: updatedIndicator, status: "updated" };
    } else {
      // Create new indicator
      const newIndicator = await prisma.indicator.create({
        data: {
          code,
          name,
          description,
          type: "FIELD_BASED", // Default type for now
          numerator_field_id: numeratorField?.id,
          denominator_field_id: denominatorField?.id,
          numerator_label,
          denominator_label,
          target_type: targetType, // Use hardcoded target type
          target_value: targetValue, // Use hardcoded target value
          target_formula,
          conditions,
          source_of_verification,
          applicable_facility_types: applicable_facility_types || [],
        },
      });

      // Create worker allocations
      for (const [workerType, amount] of Object.entries(worker_allocation)) {
        if (Number(amount) > 0) {
          await prisma.indicatorWorkerAllocation.create({
            data: {
              indicator_id: newIndicator.id,
              worker_type: workerType,
              allocated_amount: Number(amount),
            },
          });
        }
      }

      console.log(`✅ Created indicator ${code}.`);
      return { indicator: newIndicator, status: "created" };
    }
  }

  // Process all indicators
  for (const indicatorData of indicators) {
    const result = await createOrUpdateIndicator(indicatorData);
    if (result.status === "created") {
      createdCount++;
    } else if (result.status === "updated") {
      updatedCount++;
    }
  }

  console.log(`   - ${createdCount} indicators created.`);
  console.log(`   - ${updatedCount} indicators updated.`);
  
  return { createdCount, updatedCount, skippedCount };
}

seedIndicatorsFromFields()
  .catch((e) => {
    console.error("❌ Error during indicator seeding:", e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
