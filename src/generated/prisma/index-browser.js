
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password_hash: 'password_hash',
  role: 'role',
  is_active: 'is_active',
  last_login: 'last_login',
  created_at: 'created_at',
  email: 'email',
  facility_id: 'facility_id'
};

exports.Prisma.DistrictScalarFieldEnum = {
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.RemunerationSystemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.FacilityTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  description: 'description',
  display_name: 'display_name',
  is_active: 'is_active',
  updated_at: 'updated_at'
};

exports.Prisma.FacilityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  description: 'description',
  display_name: 'display_name',
  district_id: 'district_id',
  facility_type_id: 'facility_type_id',
  is_active: 'is_active',
  updated_at: 'updated_at'
};

exports.Prisma.MonthlyHealthDataScalarFieldEnum = {
  id: 'id',
  sub_centre_id: 'sub_centre_id',
  report_month: 'report_month',
  value: 'value',
  data_quality: 'data_quality',
  remarks: 'remarks',
  uploaded_by: 'uploaded_by',
  approved_by: 'approved_by',
  approved_at: 'approved_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  achievement: 'achievement',
  denominator: 'denominator',
  numerator: 'numerator',
  target_value: 'target_value',
  indicator_id: 'indicator_id',
  district_id: 'district_id',
  facility_id: 'facility_id'
};

exports.Prisma.DataUploadSessionScalarFieldEnum = {
  id: 'id',
  file_name: 'file_name',
  report_month: 'report_month',
  total_records: 'total_records',
  success_count: 'success_count',
  error_count: 'error_count',
  status: 'status',
  upload_summary: 'upload_summary',
  uploaded_by: 'uploaded_by',
  created_at: 'created_at',
  completed_at: 'completed_at',
  file_path: 'file_path'
};

exports.Prisma.FormulaScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  structure: 'structure',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.IndicatorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  structure: 'structure',
  created_at: 'created_at',
  updated_at: 'updated_at',
  code: 'code',
  applicable_facility_types: 'applicable_facility_types',
  conditions: 'conditions',
  denominator_field_id: 'denominator_field_id',
  denominator_label: 'denominator_label',
  formula_config: 'formula_config',
  formula_type: 'formula_type',
  numerator_field_id: 'numerator_field_id',
  numerator_label: 'numerator_label',
  target_formula: 'target_formula',
  target_type: 'target_type',
  target_value: 'target_value',
  target_field_id: 'target_field_id',
  source_of_verification: 'source_of_verification'
};

exports.Prisma.FieldScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at',
  calculation_formula: 'calculation_formula',
  default_value: 'default_value',
  facility_type_targets: 'facility_type_targets',
  field_type: 'field_type',
  is_active: 'is_active',
  sort_order: 'sort_order',
  user_type: 'user_type',
  validation_rules: 'validation_rules',
  field_category: 'field_category'
};

exports.Prisma.FieldValueScalarFieldEnum = {
  id: 'id',
  field_id: 'field_id',
  report_month: 'report_month',
  string_value: 'string_value',
  numeric_value: 'numeric_value',
  boolean_value: 'boolean_value',
  json_value: 'json_value',
  uploaded_by: 'uploaded_by',
  remarks: 'remarks',
  created_at: 'created_at',
  updated_at: 'updated_at',
  is_override: 'is_override',
  override_reason: 'override_reason',
  facility_id: 'facility_id'
};

exports.Prisma.FacilityFieldDefaultsScalarFieldEnum = {
  id: 'id',
  field_id: 'field_id',
  string_value: 'string_value',
  numeric_value: 'numeric_value',
  boolean_value: 'boolean_value',
  json_value: 'json_value',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at',
  facility_id: 'facility_id'
};

exports.Prisma.FacilityFieldMappingScalarFieldEnum = {
  id: 'id',
  field_id: 'field_id',
  is_required: 'is_required',
  display_order: 'display_order',
  created_at: 'created_at',
  updated_at: 'updated_at',
  facility_type_id: 'facility_type_id'
};

exports.Prisma.Sub_centreScalarFieldEnum = {
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at',
  facility_id: 'facility_id'
};

exports.Prisma.HealthWorkerScalarFieldEnum = {
  id: 'id',
  facility_id: 'facility_id',
  name: 'name',
  worker_type: 'worker_type',
  allocated_amount: 'allocated_amount',
  contact_number: 'contact_number',
  email: 'email',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.RemunerationCalculationScalarFieldEnum = {
  id: 'id',
  facility_id: 'facility_id',
  report_month: 'report_month',
  performance_percentage: 'performance_percentage',
  facility_remuneration: 'facility_remuneration',
  total_worker_remuneration: 'total_worker_remuneration',
  total_remuneration: 'total_remuneration',
  health_workers_count: 'health_workers_count',
  asha_workers_count: 'asha_workers_count',
  calculated_at: 'calculated_at'
};

exports.Prisma.WorkerRemunerationScalarFieldEnum = {
  id: 'id',
  health_worker_id: 'health_worker_id',
  report_month: 'report_month',
  allocated_amount: 'allocated_amount',
  performance_percentage: 'performance_percentage',
  calculated_amount: 'calculated_amount',
  calculated_at: 'calculated_at'
};

exports.Prisma.WorkerAllocationConfigScalarFieldEnum = {
  id: 'id',
  facility_type_id: 'facility_type_id',
  worker_type: 'worker_type',
  worker_role: 'worker_role',
  max_count: 'max_count',
  allocated_amount: 'allocated_amount',
  description: 'description',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.FacilityWorkerAllocationScalarFieldEnum = {
  id: 'id',
  facility_id: 'facility_id',
  worker_allocation_config_id: 'worker_allocation_config_id',
  worker_count: 'worker_count',
  total_allocated_amount: 'total_allocated_amount',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.FacilityTypeRemunerationScalarFieldEnum = {
  id: 'id',
  total_amount: 'total_amount',
  effective_from: 'effective_from',
  effective_to: 'effective_to',
  created_at: 'created_at',
  updated_at: 'updated_at',
  facility_type_id: 'facility_type_id'
};

exports.Prisma.IndicatorRemunerationScalarFieldEnum = {
  id: 'id',
  facility_type_remuneration_id: 'facility_type_remuneration_id',
  indicator_id: 'indicator_id',
  base_amount: 'base_amount',
  conditional_amount: 'conditional_amount',
  condition_type: 'condition_type',
  created_at: 'created_at',
  updated_at: 'updated_at',
  remuneration_system_id: 'remuneration_system_id'
};

exports.Prisma.PerformanceCalculationScalarFieldEnum = {
  id: 'id',
  sub_centre_id: 'sub_centre_id',
  indicator_id: 'indicator_id',
  report_month: 'report_month',
  numerator: 'numerator',
  denominator: 'denominator',
  achievement: 'achievement',
  target_value: 'target_value',
  remuneration_amount: 'remuneration_amount',
  calculated_at: 'calculated_at',
  facility_id: 'facility_id'
};

exports.Prisma.FacilityTargetScalarFieldEnum = {
  id: 'id',
  indicator_id: 'indicator_id',
  report_month: 'report_month',
  target_value: 'target_value',
  numerator_label: 'numerator_label',
  denominator_label: 'denominator_label',
  created_at: 'created_at',
  updated_at: 'updated_at',
  facility_id: 'facility_id'
};

exports.Prisma.IndicatorWorkerAllocationScalarFieldEnum = {
  id: 'id',
  indicator_id: 'indicator_id',
  worker_type: 'worker_type',
  allocated_amount: 'allocated_amount',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  admin: 'admin',
  facility: 'facility'
};

exports.DataQuality = exports.$Enums.DataQuality = {
  PENDING: 'PENDING',
  VALIDATED: 'VALIDATED',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.UploadStatus = exports.$Enums.UploadStatus = {
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.formula_type = exports.$Enums.formula_type = {
  RANGE_BASED: 'RANGE_BASED',
  PERCENTAGE_CAP: 'PERCENTAGE_CAP',
  BINARY: 'BINARY',
  THRESHOLD_BONUS: 'THRESHOLD_BONUS',
  MINIMUM_THRESHOLD: 'MINIMUM_THRESHOLD',
  PERCENTAGE_RANGE: 'PERCENTAGE_RANGE'
};

exports.TargetType = exports.$Enums.TargetType = {
  PERCENTAGE: 'PERCENTAGE',
  PERCENTAGE_RANGE: 'PERCENTAGE_RANGE',
  CONSTANT_VALUE: 'CONSTANT_VALUE',
  BINARY: 'BINARY',
  RANGE: 'RANGE',
  MINIMUM_THRESHOLD: 'MINIMUM_THRESHOLD',
  MAXIMUM_THRESHOLD: 'MAXIMUM_THRESHOLD'
};

exports.FieldType = exports.$Enums.FieldType = {
  CONSTANT: 'CONSTANT',
  FACILITY_SPECIFIC: 'FACILITY_SPECIFIC',
  MONTHLY_COUNT: 'MONTHLY_COUNT',
  BINARY: 'BINARY',
  PERCENTAGE: 'PERCENTAGE',
  CALCULATED: 'CALCULATED',
  INDICATOR_REFERENCE: 'INDICATOR_REFERENCE',
  FACILITY_TYPE_SPECIFIC: 'FACILITY_TYPE_SPECIFIC'
};

exports.UserType = exports.$Enums.UserType = {
  ADMIN: 'ADMIN',
  FACILITY: 'FACILITY'
};

exports.FieldCategory = exports.$Enums.FieldCategory = {
  DATA_FIELD: 'DATA_FIELD',
  TARGET_FIELD: 'TARGET_FIELD'
};

exports.Prisma.ModelName = {
  User: 'User',
  District: 'District',
  RemunerationSystem: 'RemunerationSystem',
  FacilityType: 'FacilityType',
  Facility: 'Facility',
  MonthlyHealthData: 'MonthlyHealthData',
  DataUploadSession: 'DataUploadSession',
  Formula: 'Formula',
  Indicator: 'Indicator',
  Field: 'Field',
  FieldValue: 'FieldValue',
  FacilityFieldDefaults: 'FacilityFieldDefaults',
  FacilityFieldMapping: 'FacilityFieldMapping',
  sub_centre: 'sub_centre',
  HealthWorker: 'HealthWorker',
  RemunerationCalculation: 'RemunerationCalculation',
  WorkerRemuneration: 'WorkerRemuneration',
  WorkerAllocationConfig: 'WorkerAllocationConfig',
  FacilityWorkerAllocation: 'FacilityWorkerAllocation',
  FacilityTypeRemuneration: 'FacilityTypeRemuneration',
  IndicatorRemuneration: 'IndicatorRemuneration',
  PerformanceCalculation: 'PerformanceCalculation',
  FacilityTarget: 'FacilityTarget',
  IndicatorWorkerAllocation: 'IndicatorWorkerAllocation'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
